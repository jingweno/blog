---
layout: post
title: How to set up and run PDE build
tags: eclipse
---

The <a href="http://www.eclipse.org/pde/">Plug-in Development Environment</a>(PDE) provides tools to build Eclipse plug-ins, fragments, features, update sites and RCP products. This post is about how to set up and run the PDE <a href="http://wiki.eclipse.org/index.php/PDEBuild">headless build</a>. Headless build means making the build outside the Eclipse IDE. You can also manually build it inside Eclipse with <a href="http://www.eclipse.org/articles/Article-PDE-Automation/automation.html">its GUI</a>.

Before running the PDE build, you need to set up the followings:
<ul>
	<li>build directory</li>
	<li>target platform</li>
	<li>build configuration file</li>
</ul>
h2. Build directory


The first step in setting up a build is to create the directory in which the build will take place. Next, create two subdirectories called “*plugins*” and “*features*”, and copy the plug-ins and features that you want to build respectively into these two folders. The directory structure for the build directory should look like this:
[gist]<script src="http://gist.github.com/590427.js?file=build_directory.txt"></script>[/gist]

h2. Target platform



Features and plugins are compiled and run against a set of pre-built features and plugins. These dependencies constitute the target platform. For example, most RCP applications contribute to the UI by depending on the org.eclipse.ui plug-in.  In this step, you also need to create a directory with two subdirectories called “plugins” and “features", and copy all the dependencies over. For developing RCP applications for multiple platforms, the <a href="http://archive.eclipse.org/eclipse/downloads/drops/S-3.6RC4-201006031500/index.php#DeltaPack">RCP delta pack</a> is a good option since it contains all the platform specific fragments from the Eclipse SDK. Download the delta pack and unzip it, then you finish setting up the target platform :). The directory structure for the target platform should look like this:  
[gist]<script src="http://gist.github.com/590427.js?file=target_platform.txt"></script>[/gist]

h2. Build configuration file



After setting up the directory structure for the plugins/features to build and the target platform, we need to tell PDE how we want the build. We can configure it by adding a *build.properties* file. The template of this file is available in any Eclipse distribution:

#{eclipseInstall}/plugins/org.eclipse.pde.build_#{version}/templates/headless-build/build.properties

Create a directory for the configuration file, copy the template file over, comment out unnecessary properties in the template file. The directory structure should look something like this:
[gist]<script src="http://gist.github.com/590427.js?file=build_config.txt"></script>[/gist]    

PDE build provides <a href="http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_feature_generating_antcommandline.htm">a variety of properties</a> that we can configure for the build, from checking out source from CVS to controlling the whole build lifecycle. In this post, we only discuss the most essential ones:  
[gist]<script src="http://gist.github.com/590427.js?file=build_properties.txt"></script>[/gist]

h2. Running PDE build



If you have followed me this far, you should have the following directory structure ready:

[gist]<script src="http://gist.github.com/590427.js?file=directory_structure.txt"></script>[/gist]    

Open up a terminal, type in: 

[gist]<script src="http://gist.github.com/590427.js?file=run_pde_build.txt"></script>[/gist]

You should see PDE starts building :).
h2. Summary


Setting up the PDE build looks scary at first, but once you understand <a href="http://www.eclipse.org/equinox/">Equinox</a> a little bit more, you will find everything make a lot of sense. All you need to make the build run is creating the directory structure for the plug-ins/features to build and their dependencies, and configuring some properties. The directory structure, probably as you have already realized, is Equinox's <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">convention</a> of managing components.

You can also set up <a href="http://ant.apache.org/">Ant</a> tasks or <a href="http://rake.rubyforge.org/">Rake</a> tasks to automate the whole process. Like the exercise that I have done lately, I used Rake to automate the PDE build for the Eclipse <a href="http://sourceforge.net/projects/fitpro/">FITPro</a> plugin. The source is available here: <a href="https://fitpro.svn.sourceforge.net/svnroot/fitpro/Eclipse/trunk/com.luxoft.eclipse.fit.runner.releng/">https://fitpro.svn.sourceforge.net/svnroot/fitpro/Eclipse/trunk/com.luxoft.eclipse.fit.runner.releng/</a>.